// sipo.v
module sipo (
  input wire clk,
  input wire reset,
  input wire serial_in,
  output wire [3:0] parallel_out
);

  reg [3:0] shift_register;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      shift_register <= 4'b0000;
    end else begin
      shift_register <= {shift_register[2:0], serial_in};
    end
  end

  assign parallel_out = shift_register;

endmodule


module sipo_tb;

  reg clk;
  reg reset;
  reg serial_in;
  wire [3:0] parallel_out;

  sipo uut (
    .clk(clk),
    .reset(reset),
    .serial_in(serial_in),
    .parallel_out(parallel_out)
  );

  always begin
    #5 clk = ~clk;
  end

  initial begin
    clk = 0;
    reset = 1;
    serial_in = 0;

    #10 reset = 0;

    #10 serial_in = 1; 
    #10 serial_in = 0; 
    #10 serial_in = 1; 
    #10 serial_in = 0; 

    #10 $finish;
  end

endmodule

