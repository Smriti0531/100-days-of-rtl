module alu (
  input [3:0] operandA,
  input [3:0] operandB,
  input [2:0] opcode,
  output reg [3:0] result,
  output reg zero
);

  always @(*) begin
    case(opcode)
      3'b000: result = operandA + operandB; 
      3'b001: result = operandA - operandB;
      3'b010: result = operandA & operandB; 
      3'b011: result = operandA | operandB; 
      3'b100: result = operandA ^ operandB; 
      default: result = 4'b0000; 
    endcase

    zero = (result == 4'b0000); 
  end

endmodule

`timescale 1ns/1ps

module tb_alu;
  reg [3:0] operandA;
  reg [3:0] operandB;
  reg [2:0] opcode;

  wire [3:0] result;
  wire zero;

  alu uut (
    .operandA(operandA),
    .operandB(operandB),
    .opcode(opcode),
    .result(result),
    .zero(zero)
  );
  initial begin
    operandA = 4'b1010;
    operandB = 4'b0110;
    opcode = 3'b000;
    #10;

    operandA = 4'b1010;
    operandB = 4'b0110;
    opcode = 3'b001;
    #10;

    operandA = 4'b1010;
    operandB = 4'b0110;
    opcode = 3'b010;
    #10;

    operandA = 4'b1010;
    operandB = 4'b0110;
    opcode = 3'b011;
    #10;

    operandA = 4'b1010;
    operandB = 4'b0110;
    opcode = 3'b100;
    #10;

    $stop; 
  end

endmodule

