// Single-Port RAM module

module single_port_ram
  #(parameter DATA_WIDTH = 8, parameter ADDR_WIDTH = 2)
  (input wire clk,          
   input wire rst,         
   input wire [ADDR_WIDTH-1:0] addr,  
   input wire [DATA_WIDTH-1:0] data_in,
   input wire we,        
   output reg [DATA_WIDTH-1:0] data_out 
   );

  reg [DATA_WIDTH-1:0] memory [0:2**ADDR_WIDTH-1]; 

  initial begin
    memory[0] <= 8'b0;
    memory[1] <= 8'b0;
 
  end

  always @(posedge rst) begin
    if (rst) begin
      memory[0] <= 8'b0;
      memory[1] <= 8'b0;
  
    end
  end

  always @(posedge clk) begin
 
    if (we) begin
 
      case (addr)
        2'b00: memory[0] <= data_in;
        2'b01: memory[1] <= data_in;
 
      endcase
    end else begin
 
      case (addr)
        2'b00: data_out <= memory[0];
        2'b01: data_out <= memory[1];
   
      endcase
    end
  end
endmodule



`timescale 1ns/1ns

module tb_single_port_ram;

  parameter DATA_WIDTH = 8;
  parameter ADDR_WIDTH = 2;

  reg clk;
  reg rst;
  reg [ADDR_WIDTH-1:0] addr;
  reg [DATA_WIDTH-1:0] data_in;
  reg we;
  wire [DATA_WIDTH-1:0] data_out;

  single_port_ram #(DATA_WIDTH, ADDR_WIDTH) uut (
    .clk(clk),
    .rst(rst),
    .addr(addr),
    .data_in(data_in),
    .we(we),
    .data_out(data_out)
  );

  always #5 clk = ~clk;

  initial begin

    clk = 0;
    rst = 1;
    addr = 0;
    data_in = 8'b0;
    we = 0;

    #10 rst = 0;

    #10 addr = 2'b00; data_in = 8'b10101010; we = 1; 
    #10 addr = 2'b01; data_in = 8'b11001100; we = 1; 
    #10 addr = 2'b10; data_in = 8'b11110000; we = 1; 

    #10 addr = 2'b01; we = 0; 

    #10 $finish;
  end

endmodule
