module jk_flip_flop (
  input wire clk,     
  input wire rst,    
  input wire j,       
  input wire k,      
  output reg q,       
  output reg q_bar  
);

  always @(posedge clk or posedge rst) begin
    if (rst) begin
      q <= 1'b0;       
      q_bar <= 1'b1;   
    end else begin
      if (j && ~k) begin
        q <= 1'b1;      
      end else if (~j && k) begin
        q <= 1'b0;      
      end else if (j && k) begin
        q <= ~q;       
      end
   
      q_bar <= ~q;
    end
  end

endmodule

module tb_jk_flip_flop;

 
  reg tb_clk;
  reg tb_rst;
  reg tb_j;
  reg tb_k;

 
  wire tb_q;
  wire tb_q_bar;

  jk_flip_flop uut (
    .clk(tb_clk),
    .rst(tb_rst),
    .j(tb_j),
    .k(tb_k),
    .q(tb_q),
    .q_bar(tb_q_bar)
  );

  always begin
    #5 tb_clk = ~tb_clk;  
  end 
  initial begin
    tb_clk = 0;
    tb_rst = 1;           
    tb_j = 0;
    tb_k = 0;

    #10 tb_rst = 0;        
    #10 tb_j = 1;         
    #10 tb_k = 0;          
    #10 tb_j = 0;          
    #10 tb_j = 1;          
    #10 tb_k = 1;          
    #10 tb_j = 0;          

    #10 $finish;
  end

endmodule
