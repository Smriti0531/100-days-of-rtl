module RippleCarryAdder (
  input [3:0] A,
  input [3:0] B,
  input Cin,
  output [3:0] Sum,
  output Cout
);

  assign {Cout, Sum} = A + B + Cin;

endmodule



module RippleCarryAdder_tb;

  reg [3:0] A, B;
  reg Cin;
  wire [3:0] Sum;
  wire Cout;

  RippleCarryAdder uut (
    .A(A),
    .B(B),
    .Cin(Cin),
    .Sum(Sum),
    .Cout(Cout)
  );

  initial begin
  
    A = 4'b0000;
    B = 4'b0000;
    Cin = 0;
    #10;
    $display("Test Case 1: A = %b, B = %b, Cin = %b, Sum = %b, Cout = %b", A, B, Cin, Sum, Cout);

    A = 4'b1101;
    B = 4'b0011;
    Cin = 0;
    #10;
    $display("Test Case 2: A = %b, B = %b, Cin = %b, Sum = %b, Cout = %b", A, B, Cin, Sum, Cout);

    A = 4'b1111;
    B = 4'b0001;
    Cin = 1;
    #10;
    $display("Test Case 3: A = %b, B = %b, Cin = %b, Sum = %b, Cout = %b", A, B, Cin, Sum, Cout);

    #10;
    $finish;
  end

endmodule
