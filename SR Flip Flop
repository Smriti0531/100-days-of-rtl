module jk_flip_flop (
  input wire clk,     
  input wire rst,     
  input wire j,       
  input wire k,       
  output reg q,       
  output reg q_bar    
);

  always @(posedge clk or posedge rst) begin
    if (rst) begin
      q <= 1'b0;       
      q_bar <= 1'b1;    
    end else begin
      if (j && ~k) begin
        q <= 1'b1; 
      end else if (~j && k) begin
        q <= 1'b0;      
      end else if (j && k) begin
        q <= ~q;        
      end
     
      q_bar <= ~q;
    end
  end

endmodule

module sr_flip_flop (
  input wire clk,     
  input wire rst,     
  input wire set,     
  input wire reset,  
  output wire q,     
  output wire q_bar   
);

  wire j, k;

  assign j = set;
  assign k = reset;

  jk_flip_flop uut (
    .clk(clk),
    .rst(rst),
    .j(j),
    .k(k),
    .q(q),
    .q_bar(q_bar)
  );

endmodule


module tb_sr_flip_flop;

  reg tb_clk;
  reg tb_rst;
  reg tb_set;
  reg tb_reset;

  wire tb_q;
  wire tb_q_bar;

  sr_flip_flop uut (
    .clk(tb_clk),
    .rst(tb_rst),
    .set(tb_set),
    .reset(tb_reset),
    .q(tb_q),
    .q_bar(tb_q_bar)
  );

  always begin
    #5 tb_clk = ~tb_clk;  
  end

  initial begin
    tb_clk = 0;
    tb_rst = 1;           
    tb_set = 0;
    tb_reset = 0;

    #10 tb_rst = 0;       
    #10 tb_set = 1;        
    #10 tb_set = 0;        
    #10 tb_reset = 1;      
    #10 tb_reset = 0;     

    #10 $finish;
  end

endmodule
